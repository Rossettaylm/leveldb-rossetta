// Copyright (c) 2011 The LevelDB Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file. See the AUTHORS file for names of contributors.

#ifndef STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
#define STORAGE_LEVELDB_INCLUDE_OPTIONS_H_

#include <cstddef>

#include "leveldb/export.h"

namespace leveldb {

class Cache;
class Comparator;
class Env;
class FilterPolicy;
class Logger;
class Snapshot;

// DB contents are stored in a set of blocks, each of which holds a
// sequence of key,value pairs.  Each block may be compressed before
// being stored in a file.  The following enum describes which
// compression method (if any) is used to compress a block.
enum CompressionType {
    // NOTE: do not change the values of existing entries, as these are
    // part of the persistent format on disk.
    kNoCompression = 0x0,
    kSnappyCompression = 0x1,
    kZstdCompression = 0x2,
};

// Options to control the behavior of a database (passed to DB::Open)
/**
 * @brief 通过DB::Open传入的Options选项，用于控制数据库的行为
 *
 */
struct LEVELDB_EXPORT Options {
    // Create an Options object with default values for all fields.
    Options();

    // -------------------
    // Parameters that affect behavior
    //! 一些影响数据库行为的参数

    // Comparator used to define the order of keys in the table.
    // Default: a comparator that uses lexicographic byte-wise ordering
    //
    // REQUIRES: The client must ensure that the comparator supplied
    // here has the same name and orders keys *exactly* the same as the
    // comparator provided to previous open calls on the same DB.
    //? 排序比较器
    const Comparator* comparator;

    // If true, the database will be created if it is missing.
    //? Open时如果数据库不存在，是否创建数据库
    bool create_if_missing = false;

    // If true, an error is raised if the database already exists.
    //? Open时如果数据库存在，报错
    bool error_if_exists = false;

    // If true, the implementation will do aggressive checking of the
    // data it is processing and will stop early if it detects any
    // errors.  This may have unforeseen ramifications: for example, a
    // corruption of one DB entry may cause a large number of entries to
    // become unreadable or for the entire DB to become unopenable.
    //? 是否对错误执行激进的检查，可能导致数据库发生不可读或者打不开的问题
    bool paranoid_checks = false;

    // Use the specified object to interact with the environment,
    // e.g. to read/write files, schedule background work, etc.
    // Default: Env::Default()
    //? 文件读写以及任务调度相关操作系统环境控制
    Env* env;

    // Any internal progress/error information generated by the db will
    // be written to info_log if it is non-null, or to a file stored
    // in the same directory as the DB contents if info_log is null.
    //? 系统日志，进行打印信息
    Logger* info_log = nullptr;

    // -------------------
    // Parameters that affect performance
    //! 一些影响数据库性能的参数

    // Amount of data to build up in memory (backed by an unsorted log
    // on disk) before converting to a sorted on-disk file.
    //
    // Larger values increase performance, especially during bulk loads.
    // Up to two write buffers may be held in memory at the same time,
    // so you may wish to adjust this parameter to control memory usage.
    // Also, a larger write buffer will result in a longer recovery time
    // the next time the database is opened.
    //? memtable进行写入时的内存缓冲区大小
    //? 提高缓冲区大小会带来更强的性能，占据更多内存，同时导致更长的恢复时间
    size_t write_buffer_size = 4 * 1024 * 1024;

    // Number of open files that can be used by the DB.  You may need to
    // increase this if your database has a large working set (budget
    // one open file per 2MB of working set).
    //? 数据库可打开的文件数量，预算一个工作文件占据2MB
    int max_open_files = 1000;

    // Control over blocks (user data is stored in a set of blocks, and
    // a block is the unit of reading from disk).

    // If non-null, use the specified cache for blocks.
    // If null, leveldb will automatically create and use an 8MB internal cache.
    //? block是存储用户数据以及从磁盘读取的单位
    //? 指定block cache提供缓存机制，如果为空，leveldb会使用8MB的内建cache
    Cache* block_cache = nullptr;

    // Approximate size of user data packed per block.  Note that the
    // block size specified here corresponds to uncompressed data.  The
    // actual size of the unit read from disk may be smaller if
    // compression is enabled.  This parameter can be changed dynamically.
    //? 指定一个初始block的大小，表示未压缩的数据的block块大小；此参数可能会动态改变
    size_t block_size = 4 * 1024;

    // Number of keys between restart points for delta encoding of keys.
    // This parameter can be changed dynamically.  Most clients should
    // leave this parameter alone.
    //? 用于sstable中block块key值差分编码时的重启间隔
    //? 通常来说，不应该设置此选项
    int block_restart_interval = 16;

    // Leveldb will write up to this amount of bytes to a file before
    // switching to a new one.
    // Most clients should leave this parameter alone.  However if your
    // filesystem is more efficient with larger files, you could
    // consider increasing the value.  The downside will be longer
    // compactions and hence longer latency/performance hiccups.
    // Another reason to increase this parameter might be when you are
    // initially populating a large database.
    //? leveldb写入字节数据的最大文件大小
    //? 通常来说，不应该设置此选项；当操作系统对处理大文件更有效率或者需要一个大数据库时，考虑增大此选项
    size_t max_file_size = 2 * 1024 * 1024;

    // Compress blocks using the specified compression algorithm.  This
    // parameter can be changed dynamically.
    //
    // Default: kSnappyCompression, which gives lightweight but fast
    // compression.
    //
    // Typical speeds of kSnappyCompression on an Intel(R) Core(TM)2 2.4GHz:
    //    ~200-500MB/s compression
    //    ~400-800MB/s decompression
    // Note that these speeds are significantly faster than most
    // persistent storage speeds, and therefore it is typically never
    // worth switching to kNoCompression.  Even if the input data is
    // incompressible, the kSnappyCompression implementation will
    // efficiently detect that and will switch to uncompressed mode.
    //? 压缩算法类型
    CompressionType compression = kSnappyCompression;

    // Compression level for zstd.
    // Currently only the range [-5,22] is supported. Default is 1.
    //? 使用zstd库时，指定压缩等级
    int zstd_compression_level = 1;

    // EXPERIMENTAL: If true, append to existing MANIFEST and log files
    // when a database is opened.  This can significantly speed up open.
    //
    // Default: currently false, but may become true later.
    //? Experimental选项：重用log以提高启动速度
    bool reuse_logs = false;

    // If non-null, use the specified filter policy to reduce disk reads.
    // Many applications will benefit from passing the result of
    // NewBloomFilterPolicy() here.
    //? 磁盘读取过滤器，用于减小读放大所带来的影响
    const FilterPolicy* filter_policy = nullptr;
};

// Options that control read operations
struct LEVELDB_EXPORT ReadOptions {
    // If true, all data read from underlying storage will be
    // verified against corresponding checksums.
    //? 读取数据时是否通过checksum进行校验
    bool verify_checksums = false;

    // Should the data read for this iteration be cached in memory?
    // Callers may wish to set this field to false for bulk scans.
    //? 是否将此次读取的数据cache到内存中，当读取大量数据时应该设置为false
    bool fill_cache = true;

    // If "snapshot" is non-null, read as of the supplied snapshot
    // (which must belong to the DB that is being read and which must
    // not have been released).  If "snapshot" is null, use an implicit
    // snapshot of the state at the beginning of this read operation.
    //? 设置读取快照，如果未指定则使用在此读操作开始时的模糊快照
    const Snapshot* snapshot = nullptr;
};

// Options that control write operations
struct LEVELDB_EXPORT WriteOptions {
    WriteOptions() = default;

    // If true, the write will be flushed from the operating system
    // buffer cache (by calling WritableFile::Sync()) before the write
    // is considered complete.  If this flag is true, writes will be
    // slower.
    //
    // If this flag is false, and the machine crashes, some recent
    // writes may be lost.  Note that if it is just the process that
    // crashes (i.e., the machine does not reboot), no writes will be
    // lost even if sync==false.
    //
    // In other words, a DB write with sync==false has similar
    // crash semantics as the "write()" system call.  A DB write
    // with sync==true has similar crash semantics to a "write()"
    // system call followed by "fsync()".
    //? 同步标志，如果开启则在进行写入的时候会flush到操作系统中进行同步写入，否则进行异步写入
    //? sync = true时会减慢写操作的速率，但在进程崩溃时不会丢失写入数据
    bool sync = false;
};

}  // namespace leveldb

#endif  // STORAGE_LEVELDB_INCLUDE_OPTIONS_H_
